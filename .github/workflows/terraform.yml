name: "Terraform Workflow"

on:
  workflow_call:
    # lista de variables de entrada para el flujo
    inputs:
      # ambiente sobre el cual se va a ejecutar el workflow
      environment:
        type: string
        required: true
      # el rol de amazon que se va a utilizar para ejecutar la creacion de la infra
      aws-assume-role-arn:
        type: string
        required: true
      # la region de AWS sobre la cual se va a implementar la infra
      aws-region:
        type: string
        required: true
      # el bucket S3 sobre el cual vamos a crear los string de estado 
      aws-statefile-s3-bucket:
        type: string
        required: true
      # la tabla de dynamo en la cual vamos a guardar el look
      aws-lock-dynamodb-table:
        type: string
        required: true
# job es el recurso de Github en el cual se va ejecutar los pasos puestos en este archivo
jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
# se definen el paso a paso de debe ejecutar el pipeline o workflow
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
# se define la version de terraform que se va a utilizar
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3
# configura las Credenciales del rol asociado en AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws-assume-role-arn }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ inputs.aws-region }}
# configurar la eliminacion de IaC
#      - name: Read destroy configuration
#        id: read-destroy-config
#        run: |
#          DESTROY="$(jq -r '.${{ inputs.environment }}' ./infra/destroy_config.json)"
#          echo "destroy=$(echo $DESTROY)" >> $GITHUB_OUTPUT

# inicializar le proyecto de terraform dentro del pipeline, e indicar donde se encuentra la informacion del S3, la dynamo y la region configurada en los archivos .tf
      - name: Terraform Init
        run: |
          cd infra && terraform init \
            -backend-config="bucket=${{ inputs.aws-statefile-s3-bucket }}" \
            -backend-config="key=${{ github.event.repository.name }}" \
            -backend-config="region=${{ inputs.aws-region }}" \
            -backend-config="dynamodb_table=${{ inputs.aws-lock-dynamodb-table }}"
# va a validar si tenemos errores de sintaxis dentro de los archivos de terraform
      - name: Terraform Validate
        run: terraform validate
# va a a√±adir un paso de eliminacion de la infra
      - name: Terraform Destroy
        if: steps.read-destroy-config.outputs.destroy == 'true'
        id: terraform-destroy
        run: cd infra &&
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
          terraform destroy -var-file="./envs/${{ inputs.environment }}/terraform.tfvars" -auto-approve

# va a planear todo lo que se despliega dentro de AWS basado en el codigo terraform existente
      - name: Terraform Plan
        if: steps.read-destroy-config.outputs.destroy != 'true'
        id: terraform-plan
        run: cd infra &&
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
          terraform plan -var-file="./envs/${{ inputs.environment }}/terraform.tfvars" -out="${{ inputs.environment }}.plan"
 # implementa la infraestructura planeada dentro de AWS     
      - name: Terraform Apply
        if: steps.read-destroy-config.outputs.destroy != 'true'
        id: terraform-apply
        run: cd infra &&
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
          terraform apply "${{ inputs.environment }}.plan"
